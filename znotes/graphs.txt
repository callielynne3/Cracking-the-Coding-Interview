Graphs

A tree is actually a type of graph, but not a" graphs are trees. Simply put, a tree is a connected graph without cycles.

A graph is simply a collection of nodes with edges between (some of) them.

• Graphs can be either directed (like the following graph) or undirected. While directed edges are like a one-way street, undirected edges are like a two-way street.

• The graph might consist of multiple isolated subgraphs. lf there is a path between every pair of vertices,

it is called a "connected graph:'

• The graph can also have cycles (or not). An "acyclic graph" is one without cycles.

In terms of programming, there are two common ways to represent a graph.

Adjacency List:

This is the most common way to represent a graph. Every vertex (or node) stores a list of adjacent vertices.

In an undirected graph, an edge like (a, b) would be stored twice: once in a's adjacent vertices and once in b's adjacent vertices.

A simple class definition for a graph node could look essentially the same as a tree node.

class Graph {
  public Node[] nodes;
}

class Node {
  public String name;
  public Node [] children;
}

The Graph class is used because, unlike in a tree, you can't necessarily reach all the nodes from a single node.

You don't necessarily need any additional classes to represent a graph. An array (or a hash table) of lists (arrays, arraylists, linked lists, etc.) can store the adjacency list. We tend to use node classes unless there's a compelling reason not to.

Adjacency Matrices:

An adjacency matrix is an NxN boolean matrix (where N is the number of nodes), where a true value at matrix [i] [j] indicates an edge from node i to node j . (You can also use an integer matrix with Os and 1s.)

In an undirected graph, an adjacency matrix will be symmetric. In a directed graph, it will not (necessarily) be.

The same graph algorithms that are used on adjacency lists (breadth-first search, etc.) can be performed with adjacency matrices, but they may be somewhat less efficient. In the adjacency list representation, you can easily iterate through the neighbors of a node. In the adjacency matrix representation, you will need to iterate through all the nodes to identify a node's neighbors.

Graph Search:

The two most common ways to search a graph are depth-first search and breadth-first search.

In depth-first search (DFS), we start at the root (or another arbitrarily selected node) and explore each branch completely before moving on to the next branch. That is, we go deep first (hence the name depth-first search) before we go wide.

In breadth-first search (BFS) we start at the root (or another arbitrarily selected node) and explore each neighbor before going on to any of their children. That is, we go wide (hence breadth-first search) before we go deep.

Breadth-first search and depth-first search tend to be used in different scenarios. 

DFS is often preferred if we want to visit every node in the graph. Both will work just fine, but depth-first search is a bit simpler.

However, if we want to find the shortest path (or just any path) between two nodes, BFS is generally better.

Consider representing all the friendships in the entire world in a graph and trying to find a path of friendships between Ash and Vanessa.

In depth-first search,we could take a path like Ash -) Brian -) Carleton -) Davis -) Eric -) Farah -) Gayle -) Harry -) Isabella -) John -) Kari... and then find ourselves very far away. We could go through most of the world without realizing that, in fact, Vanessa is Ash's friend. We will still eventually find the path, but it may take a long time. It also won't find us the shortest path.

In breadth-first search, we would stay close to Ash for as long as possible. We might iterate through many of Ash's friends, but we wouldn't go to his more distant connections until absolutely necessary. If Vanessa is Ash's friend, or his friend-of-a-friend, we'll find this out relatively quickly.

Depth-First Search (DFS):

In DFS, we visit a node a and then iterate through each of a's neighbors. When visiting a node b that is a neighbor of a, we visit all of b's neighbors before going on to a's other neighbors. That is, a exhaustively searches b's branch before any of its other neighbors.

Note that pre-order and other forms of tree traversal are a form of DFS. The key difference is that when implementing this algorithm for a graph, we must check if the node has been visited. If we don't, we risk getting stuck in an infinite loop.

The pseudocode below implements DFS:

void search(Node root) {

  if (root === null) return;
    visit(root);
    root.visited = true;

  for each (Node n in root. adjacent) {
    if (n.visited == false) {
      search(n);
    }
  }
}

Breadth-First Search (BFS):

BFS is a bit less intuitive, and many interviewees struggle with the implementation unless they are already familiar with it. The main tripping point is the (false) assumption that BFS is recursive. It's not. Instead, it uses a queue.

In BFS, node a visits each of a's neighbors before visiting any of their neighbors. You can think of this as searching level by level out from a. An iterative solution involving a queue usually works best:

void search(Node root) {

  Queue queue = new Queue();
  root.marked = true;
  queue.enqueue(root); // Add to the end of queue


  while (!queue.isEmpty(» {
    Node r = queue.dequeue(); // Remove from the front of the queue
    visit(r);

    foreach (Node n in r.adjacent) {
      if (n.marked == false) {
        n.marked = true;
        queue.enqueue(n);
      }
    }
  }
}

If you are asked to implement BFS, the key thing to remember is the use of the queue. The rest of the algorithm flows from this fact.

Bidirectional Search:

Bidirectional search is used to find the shortest path between a source and destination node. It operates by essentially running two simultaneous breadth-first searches, one from each node. When their searches collide, we have found a path.

Breadth-First Search:
Single search from 5 to t that collides after four levels.

VS.

Bidirectional Search:
Two searches (one from 5 and one from t) that collide after four levels total (two levels each).

To see why this is faster, consider a graph where every node has at most k adjacent nodes and the shortest path from node 5 to node t has length d.

• In traditional breadth-first search, we would search up to k nodes in the first "level" of the search. In the second level, we would search up to k nodes for each of those first k nodes, so k2 nodes total (thus far). We would do this d times, so that's a (kd ) nodes.

• In bidirectional search, we have two searches that collide after approximately ~ levels (the midpoint

of the path). The search from 5 visits approximately kd/2, as does the search from t. That's approximately 2 k d/ 2, or a (kd12 ), nodes total.

This might seem like a minor difference, but it's not. It's huge. Recall that (kd/2) * (kd/ 2) = kd• The bidirectional search is actually faster by a factor of kdl2.

Put another way: if our system could only support searching "friend of friend" paths in breadth-first search, it could now likely support "friend of friend of friend of friend " paths. We can support paths that are twice as long.